# vim: ft=bash

# yabai -m config debug_output on

# Set all padding and gaps to 6pt (default: 0)
yabai -m config top_padding    8
yabai -m config bottom_padding 8
yabai -m config left_padding   8
yabai -m config right_padding  8
yabai -m config window_gap     8

yabai -m config window_placement second_child

# Floating point value between 0 and 1 (default: 0.5)
yabai -m config split_ratio 0.382 

# Expos√© behaves strangely without this
yabai -m config mouse_follows_focus on
# Ensure that when a window is brought into focus by yabai, that it actually
# behaves as if it was clicked (i.e. has an active cursor). Doesn't take effect
# during normal mouse movment
yabai -m config focus_follows_mouse on

# When dropping a window in the center of another, stack instead of swap
yabai -m config mouse_drop_action stack

# Don't manage windows from these apps
APPS=(
  "Activity Monitor"
  "Calculator"
  "Finder"
  "Kaleidoscope"
  "Karabiner-EventViewer"
  "Messages"
  "Shottr"
  "System Settings"
  "TablePlus"
)
for A in "${APPS[@]}"; do yabai -m rule --add app="${A}" manage=off; done

yabai -m rule --add title="Settings" manage=off
yabai -m rule --add app="Arc" title="Paul" manage=off
yabai -m rule --add app="IntelliJ IDEA" title="Welcome to IntelliJ IDEA" manage=off
yabai -m rule --add app="IntelliJ IDEA" title="Run/Debug Configurations" manage=off

# ARC=(
#   "Paul"
# )
# for T in "${ARC[@]}"; do yabai -m rule --add app="Arc" title="${T}" manage=off; done
# yabai -m rule --add app=".*" manage=off

# yabai -m signal --add event=window_created action='
#   yabai -m query --windows --window $YABAI_WINDOW_ID | \
#     jq -er ".\"can-resize\"" && \
#     yabai -m window $YABAI_WINDOW_ID --toggle float
# '

# yabai -m signal --add event=window_created action='
#   yabai -m query --windows --window $YABAI_WINDOW_ID | jq -er ".\"can-resize\" or .\"is-floating\"" || \
#   yabai -m window $YABAI_WINDOW_ID --toggle float && \
#   yabai -m window $YABAI_WINDOW_ID --grid 3:3:1:1:1:1
# '

yabai -m signal --add event=window_focused \
  action='DATA=$(yabai -m query --windows --window $YABAI_WINDOW_ID | jq ". | tostring"); hs -c "HandleYabaiWindow($DATA)"'

yabai -m signal --add event=space_changed \
  action='DATA=$(yabai -m query --spaces --space $YABAI_SPACE_INDEX | jq ". | tostring"); hs -c "HandleYabaiSpace($DATA)"'
